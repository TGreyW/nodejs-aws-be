service: importservice

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-1

  # you can define service wide environment variables here
  environment:
    SQS_URL: ${cf:productservice-dev.SQSUrl}

  # iam roles here
  iamRoleStatements:
    - Effect: "Allow"
      Action: "s3:ListBucket"
      Resource:
        - "arn:aws:s3:::bulka-shop-static"
    - Effect: "Allow"
      Action: "s3:*"
      Resource:
        - "arn:aws:s3:::bulka-shop-static/*"
    - Effect: "Allow"
      Action: "sqs:*"
      Resource:
        - ${cf:productservice-dev.SQSArn}

# functions here
functions:
  importProductsFile:
    handler: handler.importProductsFile
    events:
      - http:
          path: import
          method: get
          cors: true
          request:
            parameters:
              querystrings:
                name: true
          authorizer:
            name: basicAuthorizer
            arn: ${cf:authservice-dev.AuthArn}
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token
  importFileParser:
    handler: handler.importFileParser
    events:
      - s3:
          bucket: bulka-shop-static
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploaded/
          existing: true

# you can add CloudFormation resource templates here
resources:
  Resources:
    GatewayResponseDenied:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        ResponseType: ACCESS_DENIED
        RestApiId:
          Ref: ApiGatewayRestApi
    GatewayResponseUnauthorized:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: ApiGatewayRestApi
